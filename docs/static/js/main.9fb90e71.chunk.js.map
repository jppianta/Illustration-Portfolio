{"version":3,"sources":["portfolio/index.js","App.js","serviceWorker.js","index.js","portfolio/Background.png","portfolio/Dragon1600X1200.png","portfolio/SelfPortrait.png","portfolio/Twitter.png","assets/me.jpg"],"names":["portrait","src","selfPortrait","title","dragon","twitter","background","Meta","Card","App","props","selectImg","event","element","target","img","getImgElement","selected","find","image","endsWith","setState","visible","handleCancel","onMenuSelect","option","innerHTML","menuOption","state","modalVisible","classList","contains","parentElement","getElementsByClassName","className","me","alt","this","onClick","map","key","hoverable","cover","width","onCancel","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6VAKaA,EAAW,CACpB,CAAEC,IAAKC,IAAcC,MAAO,MAC5B,CAAEF,IAAKG,IAAQD,MAAO,kBACtB,CAAEF,IAAKI,IAASF,MAAO,WACvB,CAAEF,IAAKK,IAAYH,MAAO,e,2CCFtBI,EAASC,IAATD,KAmGOE,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,UAAY,SAACC,GACX,IAAMC,EAAUD,EAAME,OAEhBC,EAAM,EAAKC,cAAcH,GAASZ,IAElCgB,EAAWjB,EAASkB,MAAK,SAAAC,GAAK,OAAIJ,EAAIK,SAASD,EAAMlB,QAE3D,EAAKoB,SAAS,CAAEJ,WAAUK,SAAS,KAjBlB,EA4BnBC,aAAe,WACb,EAAKF,SAAS,CACZC,SAAS,KA9BM,EAkCnBE,aAAe,SAACZ,GACd,IAAMa,EAASb,EAAME,OAAOY,UAE5B,EAAKL,SAAS,CAAEM,WAAYF,KAlC5B,EAAKG,MAAQ,CACXX,SAAU,KACVU,WAAY,YACZE,cAAc,GANC,E,0DAoBLhB,GACZ,MAAQA,EAAQiB,UAAUC,SAAS,aACjClB,EAAUA,EAAQmB,cAGpB,OAAOnB,EAAQoB,uBAAuB,WAAW,K,+BAezC,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,UAAUjC,IAAKkC,IAAIC,IAAI,sBACtC,oDACA,yBAAKF,UAAU,QACb,yBAAKA,UAAU,mBACb,0BAAMA,UAAS,qBAA0C,cAA1BG,KAAKT,MAAMD,WAA6B,iBAAmB,IAAMW,QAASD,KAAKb,cAA9G,cAIF,wBAAIU,UAAU,cACd,yBAAKA,UAAU,mBACb,0BAAMA,UAAS,qBAA0C,UAA1BG,KAAKT,MAAMD,WAAyB,iBAAmB,IAAMW,QAASD,KAAKb,cAA1G,YAOsB,cAA1Ba,KAAKT,MAAMD,WACT,yBAAKO,UAAU,wBAEXlC,EAASuC,KAAI,SAAApB,GAAK,OAChB,kBAAC,IAAD,CACEqB,IAAKrB,EAAMhB,MACXsC,WAAS,EACTC,MAAO,yBAAKR,UAAU,UAAUE,IAAKjB,EAAMhB,MAAOF,IAAKkB,EAAMlB,MAC7DqC,QAAS,EAAK3B,WAEd,kBAACJ,EAAD,CAAMJ,MAAOgB,EAAMhB,aAM3B,yBAAK+B,UAAU,oBAAf,kQAKJ,kBAAC,IAAD,CACE/B,MAAOkC,KAAKT,MAAMX,UAAYoB,KAAKT,MAAMX,SAASd,MAClDwC,MAAO,IACPrB,QAASe,KAAKT,MAAMN,QACpBsB,SAAUP,KAAKd,aACfsB,OAAQ,MAEPR,KAAKT,MAAMX,SAAW,yBAAKiB,UAAU,WAAWE,IAAKC,KAAKT,MAAMX,SAASd,MAAOF,IAAKoC,KAAKT,MAAMX,SAAShB,MAAU,W,GA1F5G6C,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.9fb90e71.chunk.js","sourcesContent":["import background from './Background.png';\r\nimport dragon from './Dragon1600X1200.png';\r\nimport selfPortrait from './SelfPortrait.png';\r\nimport twitter from './Twitter.png';\r\n\r\nexport const portrait = [\r\n    { src: selfPortrait, title: 'Me' },\r\n    { src: dragon, title: 'Chinese Dragon' },\r\n    { src: twitter, title: 'Twitter' },\r\n    { src: background, title: 'Base Forms' }\r\n];","import React, { Component } from 'react';\nimport './App.css';\nimport { portrait } from './portfolio';\nimport me from './assets/me.jpg'\nimport { Card } from 'antd';\nimport Modal from 'antd/lib/modal/Modal';\n\nconst { Meta } = Card;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: null,\n      menuOption: 'Portfolio',\n      modalVisible: false\n    }\n  }\n\n  selectImg = (event) => {\n    const element = event.target;\n\n    const img = this.getImgElement(element).src;\n\n    const selected = portrait.find(image => img.endsWith(image.src));\n\n    this.setState({ selected, visible: true });\n  }\n\n  getImgElement(element) {\n    while (!element.classList.contains('ant-card')) {\n      element = element.parentElement;\n    }\n\n    return element.getElementsByClassName('cardImg')[0];\n  }\n\n  handleCancel = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  onMenuSelect = (event) => {\n    const option = event.target.innerHTML;\n\n    this.setState({ menuOption: option })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <img className=\"logoImg\" src={me} alt=\"Joao Pedro Pianta\" />\n          <h1>João Pedro Pianta</h1>\n          <div className=\"menu\">\n            <div className=\"optionContainer\">\n              <span className={`menuOption ${this.state.menuOption === 'Portfolio' ? 'selectedOption' : ''}`} onClick={this.onMenuSelect}>\n                Portfolio\n              </span>\n            </div>\n            <hr className=\"separator\"></hr>\n            <div className=\"optionContainer\">\n              <span className={`menuOption ${this.state.menuOption === 'About' ? 'selectedOption' : ''}`} onClick={this.onMenuSelect}>\n                About\n              </span>\n            </div>\n          </div>\n        </div>\n        {\n          this.state.menuOption === 'Portfolio' ?\n            <div className=\"portfolio tabContent\">\n              {\n                portrait.map(image =>\n                  <Card\n                    key={image.title}\n                    hoverable\n                    cover={<img className=\"cardImg\" alt={image.title} src={image.src} />}\n                    onClick={this.selectImg}\n                  >\n                    <Meta title={image.title} />\n                  </Card>\n                )\n\n              }\n            </div> :\n            <div className=\"about tabContent\">\n              Hi, my name is João Pedro Pianta. I am a brazillian Software Engineer who loves art. I started creating some illustrations just for fun, \n              but since I am a good frontend engineer, why not combine the two skills and create this beatiful portfolio, right?\n            </div>\n        }\n        <Modal\n          title={this.state.selected && this.state.selected.title}\n          width={800}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          footer={null}\n        >\n          {this.state.selected ? <img className=\"modalImg\" alt={this.state.selected.title} src={this.state.selected.src} /> : null}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Background.a70fc984.png\";","module.exports = __webpack_public_path__ + \"static/media/Dragon1600X1200.c57547cd.png\";","module.exports = __webpack_public_path__ + \"static/media/SelfPortrait.43aa8557.png\";","module.exports = __webpack_public_path__ + \"static/media/Twitter.1c419518.png\";","module.exports = __webpack_public_path__ + \"static/media/me.3d2baa1d.jpg\";"],"sourceRoot":""}